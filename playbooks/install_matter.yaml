---
- name: Setup Matter build environment
  hosts: "{{ target_hosts | default('comm_dev_group') }}"
  become: yes
  gather_facts: yes
  vars_files:
    - ../vault/secrets.yaml
  vars:
    node_version: "node"  # Use "node" for the latest version or specify a version like "14.x"
    user_home: "/home/user"  # Adjust this to the actual user's home directory


  tasks:
    - name: Ensure nvm (Node Version Manager) is installed
  # make sure the version is updated to the latest shown with github.com/nvm-sh/nvm/blob/master/README.md
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
      args:
        creates: "{{ user_home }}/.nvm/nvm.sh"
      environment:
        HOME: "{{ user_home }}"
      become: yes
      become_user: user
      when: install_nodejs | default (false)

    - name: Install the latest version of Node.js
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        nvm install {{ node_version }}
      environment:
        HOME: "{{ user_home }}"
      become: yes
      become_user: user
      when: install_nodejs | default (false)

    - name: Create matter directory in the user's home if it doesn't exist
      file:
        path: "{{ user_home }}/matter"
        state: directory
        owner: user
        group: user
      become: yes

    - name: Clone matter.js repository
      git:
        repo: "https://github.com/project-chip/matter.js"
        dest: "{{ user_home }}/matter/matter.js"
        clone: yes
        update: yes
      become: yes
      become_user: user
      when: install_matterjs | default (false)

    - name: Install matter.js dependencies
      shell: |
        export NVM_DIR="{{ user_home }}/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion (optional)
        cd {{ user_home }}/matter/matter.js
        npm install
      environment:
        HOME: "{{ user_home }}"
      become: yes
      become_user: user
      when: install_matterjs | default (false)

    - name: Clone connectedhomeip repository
      git:
        repo: "https://github.com/project-chip/connectedhomeip"
        dest: "{{ user_home }}/matter/connectedhomeip"
        clone: yes
        update: yes
      become: yes
      become_user: user
      when: install_connectedhomeip | default (false)

    - name: Install prerequisites for building connectedhomeip
      apt:
        name:
          - git
          - gcc
          - g++
          - pkg-config
          - libssl-dev
          - libdbus-1-dev
          - libglib2.0-dev
          - libavahi-client-dev
          - ninja-build
          - python3-venv
          - python3-dev
          - python3-pip
          - unzip
          - libgirepository1.0-dev
          - libcairo2-dev
          - libreadline-dev
          - libsdl2-dev  # For UI builds
        state: present
        update_cache: yes
      when: install_connectedhomeip | default (false)

    - name: Configure wpa_supplicant for permanent changes
      block:
        - name: Edit dbus-fi.w1.wpa_supplicant1.service to use config file
          ansible.builtin.lineinfile:
            path: /etc/systemd/system/dbus-fi.w1.wpa_supplicant1.service
            regexp: '^ExecStart='
            line: 'ExecStart=/sbin/wpa_supplicant -u -s -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf'
            create: yes
        - name: Add wpa_supplicant configuration
          copy:
            dest: /etc/wpa_supplicant/wpa_supplicant.conf
            content: |
              ctrl_interface=DIR=/run/wpa_supplicant
              update_config=1
            owner: root
            group: root
            mode: '0644'
        - name: Reload systemd daemon to apply changes
          systemd:
            daemon_reload: yes
      when: wpa_supplicant_matter_update | default (false)

    - name: Create matter directory in the user's home if it doesn't exist
      file:
        path: "{{ user_home }}/matter"
        state: directory
        owner: user
        group: user
      become: yes
      when: install_connectedhomeip | default (false)

    - name: Clone connectedhomeip repository
      git:
        repo: "https://github.com/project-chip/connectedhomeip"
        dest: "{{ user_home }}/matter/connectedhomeip"
        clone: yes
        update: yes
        recursive: yes  # Ensures submodules are cloned       
      become: yes
      become_user: user
      when: install_connectedhomeip_fake | default(false)

    - name: Prepare for building connectedhomeip
      become: yes
      become_user: user
      shell: |
        cd {{ user_home }}/matter/connectedhomeip
        source scripts/activate.sh
      args:
        executable: /bin/bash
      when: install_connectedhomeip | default (false)

    - name: Update the environment if needed
      become: yes
      become_user: user
      shell: |
        cd {{ user_home }}/matter/connectedhomeip
        source scripts/bootstrap.sh
      args:
        executable: /bin/bash
      when: install_connectedhomeip | default (false)

    - name: Build connectedhomeip for the host OS
      become: yes
      become_user: user
      shell: |
        cd {{ user_home }}/matter/connectedhomeip
        source scripts/activate.sh
        gn gen out/host
        ninja -C out/host
      args:
        executable: /bin/bash
      when: install_connectedhomeip | default (false)

    - name: Build the example application (chip-tool)
      become: yes
      become_user: user
      shell: |
        cd {{ user_home }}/matter/connectedhomeip
        ./gn_build.sh  # For a full build
        # Or for a specific example:
        # scripts/examples/gn_build_example.sh examples/chip-tool SOME-PATH/
      args:
        executable: /bin/bash
      when: install_connectedhomeip | default (false)